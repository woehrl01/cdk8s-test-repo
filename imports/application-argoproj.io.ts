// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Application is a definition of Application resource.
 *
 * @schema Application
 */
export class Application extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Application"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'argoproj.io/v1alpha1',
    kind: 'Application',
  }

  /**
   * Renders a Kubernetes manifest for "Application".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ApplicationProps): any {
    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(props),
    };
  }

  /**
   * Defines a "Application" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ApplicationProps) {
    super(scope, id, {
      ...Application.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Application.GVK,
      ...toJson_ApplicationProps(resolved),
    };
  }
}

/**
 * Application is a definition of Application resource.
 *
 * @schema Application
 */
export interface ApplicationProps {
  /**
   * @schema Application#metadata
   */
  readonly metadata: ApiObjectMetadata;

  /**
   * Operation contains information about a requested or running operation
   *
   * @schema Application#operation
   */
  readonly operation?: ApplicationOperation;

  /**
   * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
   *
   * @schema Application#spec
   */
  readonly spec: ApplicationSpec;

}

/**
 * Converts an object of type 'ApplicationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationProps(obj: ApplicationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'operation': toJson_ApplicationOperation(obj.operation),
    'spec': toJson_ApplicationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Operation contains information about a requested or running operation
 *
 * @schema ApplicationOperation
 */
export interface ApplicationOperation {
  /**
   * Info is a list of informational items for this operation
   *
   * @schema ApplicationOperation#info
   */
  readonly info?: ApplicationOperationInfo[];

  /**
   * InitiatedBy contains information about who initiated the operations
   *
   * @schema ApplicationOperation#initiatedBy
   */
  readonly initiatedBy?: ApplicationOperationInitiatedBy;

  /**
   * Retry controls the strategy to apply if a sync fails
   *
   * @schema ApplicationOperation#retry
   */
  readonly retry?: ApplicationOperationRetry;

  /**
   * Sync contains parameters for the operation
   *
   * @schema ApplicationOperation#sync
   */
  readonly sync?: ApplicationOperationSync;

}

/**
 * Converts an object of type 'ApplicationOperation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperation(obj: ApplicationOperation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'info': obj.info?.map(y => toJson_ApplicationOperationInfo(y)),
    'initiatedBy': toJson_ApplicationOperationInitiatedBy(obj.initiatedBy),
    'retry': toJson_ApplicationOperationRetry(obj.retry),
    'sync': toJson_ApplicationOperationSync(obj.sync),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
 *
 * @schema ApplicationSpec
 */
export interface ApplicationSpec {
  /**
   * Destination is a reference to the target Kubernetes server and namespace
   *
   * @schema ApplicationSpec#destination
   */
  readonly destination: ApplicationSpecDestination;

  /**
   * IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
   *
   * @schema ApplicationSpec#ignoreDifferences
   */
  readonly ignoreDifferences?: ApplicationSpecIgnoreDifferences[];

  /**
   * Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
   *
   * @schema ApplicationSpec#info
   */
  readonly info?: ApplicationSpecInfo[];

  /**
   * Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project.
   *
   * @schema ApplicationSpec#project
   */
  readonly project: string;

  /**
   * RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
   *
   * @default 10.
   * @schema ApplicationSpec#revisionHistoryLimit
   */
  readonly revisionHistoryLimit?: number;

  /**
   * Source is a reference to the location of the application's manifests or chart
   *
   * @schema ApplicationSpec#source
   */
  readonly source: ApplicationSpecSource;

  /**
   * SyncPolicy controls when and how a sync will be performed
   *
   * @schema ApplicationSpec#syncPolicy
   */
  readonly syncPolicy?: ApplicationSpecSyncPolicy;

}

/**
 * Converts an object of type 'ApplicationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpec(obj: ApplicationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'destination': toJson_ApplicationSpecDestination(obj.destination),
    'ignoreDifferences': obj.ignoreDifferences?.map(y => toJson_ApplicationSpecIgnoreDifferences(y)),
    'info': obj.info?.map(y => toJson_ApplicationSpecInfo(y)),
    'project': obj.project,
    'revisionHistoryLimit': obj.revisionHistoryLimit,
    'source': toJson_ApplicationSpecSource(obj.source),
    'syncPolicy': toJson_ApplicationSpecSyncPolicy(obj.syncPolicy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationOperationInfo
 */
export interface ApplicationOperationInfo {
  /**
   * @schema ApplicationOperationInfo#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationInfo#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationInfo(obj: ApplicationOperationInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * InitiatedBy contains information about who initiated the operations
 *
 * @schema ApplicationOperationInitiatedBy
 */
export interface ApplicationOperationInitiatedBy {
  /**
   * Automated is set to true if operation was initiated automatically by the application controller.
   *
   * @schema ApplicationOperationInitiatedBy#automated
   */
  readonly automated?: boolean;

  /**
   * Username contains the name of a user who started operation
   *
   * @schema ApplicationOperationInitiatedBy#username
   */
  readonly username?: string;

}

/**
 * Converts an object of type 'ApplicationOperationInitiatedBy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationInitiatedBy(obj: ApplicationOperationInitiatedBy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'automated': obj.automated,
    'username': obj.username,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Retry controls the strategy to apply if a sync fails
 *
 * @schema ApplicationOperationRetry
 */
export interface ApplicationOperationRetry {
  /**
   * Backoff controls how to backoff on subsequent retries of failed syncs
   *
   * @schema ApplicationOperationRetry#backoff
   */
  readonly backoff?: ApplicationOperationRetryBackoff;

  /**
   * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
   *
   * @schema ApplicationOperationRetry#limit
   */
  readonly limit?: number;

}

/**
 * Converts an object of type 'ApplicationOperationRetry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationRetry(obj: ApplicationOperationRetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backoff': toJson_ApplicationOperationRetryBackoff(obj.backoff),
    'limit': obj.limit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Sync contains parameters for the operation
 *
 * @schema ApplicationOperationSync
 */
export interface ApplicationOperationSync {
  /**
   * DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
   *
   * @schema ApplicationOperationSync#dryRun
   */
  readonly dryRun?: boolean;

  /**
   * Manifests is an optional field that overrides sync source with a local directory for development
   *
   * @schema ApplicationOperationSync#manifests
   */
  readonly manifests?: string[];

  /**
   * Prune specifies to delete resources from the cluster that are no longer tracked in git
   *
   * @schema ApplicationOperationSync#prune
   */
  readonly prune?: boolean;

  /**
   * Resources describes which resources shall be part of the sync
   *
   * @schema ApplicationOperationSync#resources
   */
  readonly resources?: ApplicationOperationSyncResources[];

  /**
   * Revision is the revision (Git) or chart version (Helm) which to sync the application to If omitted, will use the revision specified in app spec.
   *
   * @schema ApplicationOperationSync#revision
   */
  readonly revision?: string;

  /**
   * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
   *
   * @schema ApplicationOperationSync#source
   */
  readonly source?: ApplicationOperationSyncSource;

  /**
   * SyncOptions provide per-sync sync-options, e.g. Validate=false
   *
   * @schema ApplicationOperationSync#syncOptions
   */
  readonly syncOptions?: string[];

  /**
   * SyncStrategy describes how to perform the sync
   *
   * @schema ApplicationOperationSync#syncStrategy
   */
  readonly syncStrategy?: ApplicationOperationSyncSyncStrategy;

}

/**
 * Converts an object of type 'ApplicationOperationSync' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSync(obj: ApplicationOperationSync | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'dryRun': obj.dryRun,
    'manifests': obj.manifests?.map(y => y),
    'prune': obj.prune,
    'resources': obj.resources?.map(y => toJson_ApplicationOperationSyncResources(y)),
    'revision': obj.revision,
    'source': toJson_ApplicationOperationSyncSource(obj.source),
    'syncOptions': obj.syncOptions?.map(y => y),
    'syncStrategy': toJson_ApplicationOperationSyncSyncStrategy(obj.syncStrategy),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Destination is a reference to the target Kubernetes server and namespace
 *
 * @schema ApplicationSpecDestination
 */
export interface ApplicationSpecDestination {
  /**
   * Name is an alternate way of specifying the target cluster by its symbolic name
   *
   * @schema ApplicationSpecDestination#name
   */
  readonly name?: string;

  /**
   * Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
   *
   * @schema ApplicationSpecDestination#namespace
   */
  readonly namespace?: string;

  /**
   * Server specifies the URL of the target cluster and must be set to the Kubernetes control plane API
   *
   * @schema ApplicationSpecDestination#server
   */
  readonly server?: string;

}

/**
 * Converts an object of type 'ApplicationSpecDestination' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecDestination(obj: ApplicationSpecDestination | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'namespace': obj.namespace,
    'server': obj.server,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
 *
 * @schema ApplicationSpecIgnoreDifferences
 */
export interface ApplicationSpecIgnoreDifferences {
  /**
   * @schema ApplicationSpecIgnoreDifferences#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationSpecIgnoreDifferences#jqPathExpressions
   */
  readonly jqPathExpressions?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#jsonPointers
   */
  readonly jsonPointers?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#kind
   */
  readonly kind: string;

  /**
   * ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the desired state defined in the SCM and won't be displayed in diffs
   *
   * @schema ApplicationSpecIgnoreDifferences#managedFieldsManagers
   */
  readonly managedFieldsManagers?: string[];

  /**
   * @schema ApplicationSpecIgnoreDifferences#name
   */
  readonly name?: string;

  /**
   * @schema ApplicationSpecIgnoreDifferences#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationSpecIgnoreDifferences' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecIgnoreDifferences(obj: ApplicationSpecIgnoreDifferences | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'jqPathExpressions': obj.jqPathExpressions?.map(y => y),
    'jsonPointers': obj.jsonPointers?.map(y => y),
    'kind': obj.kind,
    'managedFieldsManagers': obj.managedFieldsManagers?.map(y => y),
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ApplicationSpecInfo
 */
export interface ApplicationSpecInfo {
  /**
   * @schema ApplicationSpecInfo#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecInfo#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecInfo' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecInfo(obj: ApplicationSpecInfo | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source is a reference to the location of the application's manifests or chart
 *
 * @schema ApplicationSpecSource
 */
export interface ApplicationSpecSource {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationSpecSource#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationSpecSource#directory
   */
  readonly directory?: ApplicationSpecSourceDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationSpecSource#helm
   */
  readonly helm?: ApplicationSpecSourceHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationSpecSource#kustomize
   */
  readonly kustomize?: ApplicationSpecSourceKustomize;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationSpecSource#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationSpecSource#plugin
   */
  readonly plugin?: ApplicationSpecSourcePlugin;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationSpecSource#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationSpecSource#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSource(obj: ApplicationSpecSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationSpecSourceDirectory(obj.directory),
    'helm': toJson_ApplicationSpecSourceHelm(obj.helm),
    'kustomize': toJson_ApplicationSpecSourceKustomize(obj.kustomize),
    'path': obj.path,
    'plugin': toJson_ApplicationSpecSourcePlugin(obj.plugin),
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SyncPolicy controls when and how a sync will be performed
 *
 * @schema ApplicationSpecSyncPolicy
 */
export interface ApplicationSpecSyncPolicy {
  /**
   * Automated will keep an application synced to the target revision
   *
   * @schema ApplicationSpecSyncPolicy#automated
   */
  readonly automated?: ApplicationSpecSyncPolicyAutomated;

  /**
   * Retry controls failed sync retry behavior
   *
   * @schema ApplicationSpecSyncPolicy#retry
   */
  readonly retry?: ApplicationSpecSyncPolicyRetry;

  /**
   * Options allow you to specify whole app sync-options
   *
   * @schema ApplicationSpecSyncPolicy#syncOptions
   */
  readonly syncOptions?: string[];

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSyncPolicy(obj: ApplicationSpecSyncPolicy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'automated': toJson_ApplicationSpecSyncPolicyAutomated(obj.automated),
    'retry': toJson_ApplicationSpecSyncPolicyRetry(obj.retry),
    'syncOptions': obj.syncOptions?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Backoff controls how to backoff on subsequent retries of failed syncs
 *
 * @schema ApplicationOperationRetryBackoff
 */
export interface ApplicationOperationRetryBackoff {
  /**
   * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
   *
   * @schema ApplicationOperationRetryBackoff#duration
   */
  readonly duration?: string;

  /**
   * Factor is a factor to multiply the base duration after each failed retry
   *
   * @schema ApplicationOperationRetryBackoff#factor
   */
  readonly factor?: number;

  /**
   * MaxDuration is the maximum amount of time allowed for the backoff strategy
   *
   * @schema ApplicationOperationRetryBackoff#maxDuration
   */
  readonly maxDuration?: string;

}

/**
 * Converts an object of type 'ApplicationOperationRetryBackoff' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationRetryBackoff(obj: ApplicationOperationRetryBackoff | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'factor': obj.factor,
    'maxDuration': obj.maxDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SyncOperationResource contains resources to sync.
 *
 * @schema ApplicationOperationSyncResources
 */
export interface ApplicationOperationSyncResources {
  /**
   * @schema ApplicationOperationSyncResources#group
   */
  readonly group?: string;

  /**
   * @schema ApplicationOperationSyncResources#kind
   */
  readonly kind: string;

  /**
   * @schema ApplicationOperationSyncResources#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncResources#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncResources(obj: ApplicationOperationSyncResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'group': obj.group,
    'kind': obj.kind,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Source overrides the source definition set in the application. This is typically set in a Rollback operation and is nil during a Sync operation
 *
 * @schema ApplicationOperationSyncSource
 */
export interface ApplicationOperationSyncSource {
  /**
   * Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
   *
   * @schema ApplicationOperationSyncSource#chart
   */
  readonly chart?: string;

  /**
   * Directory holds path/directory specific options
   *
   * @schema ApplicationOperationSyncSource#directory
   */
  readonly directory?: ApplicationOperationSyncSourceDirectory;

  /**
   * Helm holds helm specific options
   *
   * @schema ApplicationOperationSyncSource#helm
   */
  readonly helm?: ApplicationOperationSyncSourceHelm;

  /**
   * Kustomize holds kustomize specific options
   *
   * @schema ApplicationOperationSyncSource#kustomize
   */
  readonly kustomize?: ApplicationOperationSyncSourceKustomize;

  /**
   * Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
   *
   * @schema ApplicationOperationSyncSource#path
   */
  readonly path?: string;

  /**
   * Plugin holds config management plugin specific options
   *
   * @schema ApplicationOperationSyncSource#plugin
   */
  readonly plugin?: ApplicationOperationSyncSourcePlugin;

  /**
   * RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
   *
   * @schema ApplicationOperationSyncSource#repoURL
   */
  readonly repoUrl: string;

  /**
   * TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
   *
   * @schema ApplicationOperationSyncSource#targetRevision
   */
  readonly targetRevision?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSource' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSource(obj: ApplicationOperationSyncSource | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'chart': obj.chart,
    'directory': toJson_ApplicationOperationSyncSourceDirectory(obj.directory),
    'helm': toJson_ApplicationOperationSyncSourceHelm(obj.helm),
    'kustomize': toJson_ApplicationOperationSyncSourceKustomize(obj.kustomize),
    'path': obj.path,
    'plugin': toJson_ApplicationOperationSyncSourcePlugin(obj.plugin),
    'repoURL': obj.repoUrl,
    'targetRevision': obj.targetRevision,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * SyncStrategy describes how to perform the sync
 *
 * @schema ApplicationOperationSyncSyncStrategy
 */
export interface ApplicationOperationSyncSyncStrategy {
  /**
   * Apply will perform a `kubectl apply` to perform the sync.
   *
   * @schema ApplicationOperationSyncSyncStrategy#apply
   */
  readonly apply?: ApplicationOperationSyncSyncStrategyApply;

  /**
   * Hook will submit any referenced resources to perform the sync. This is the default strategy
   *
   * @schema ApplicationOperationSyncSyncStrategy#hook
   */
  readonly hook?: ApplicationOperationSyncSyncStrategyHook;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategy' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSyncStrategy(obj: ApplicationOperationSyncSyncStrategy | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apply': toJson_ApplicationOperationSyncSyncStrategyApply(obj.apply),
    'hook': toJson_ApplicationOperationSyncSyncStrategyHook(obj.hook),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationSpecSourceDirectory
 */
export interface ApplicationSpecSourceDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationSpecSourceDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationSpecSourceDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationSpecSourceDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationSpecSourceDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationSpecSourceDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectory' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceDirectory(obj: ApplicationSpecSourceDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationSpecSourceDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationSpecSourceHelm
 */
export interface ApplicationSpecSourceHelm {
  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationSpecSourceHelm#fileParameters
   */
  readonly fileParameters?: ApplicationSpecSourceHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationSpecSourceHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationSpecSourceHelm#parameters
   */
  readonly parameters?: ApplicationSpecSourceHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationSpecSourceHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationSpecSourceHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationSpecSourceHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationSpecSourceHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block
   *
   * @schema ApplicationSpecSourceHelm#values
   */
  readonly values?: string;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationSpecSourceHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceHelm(obj: ApplicationSpecSourceHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationSpecSourceHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'parameters': obj.parameters?.map(y => toJson_ApplicationSpecSourceHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationSpecSourceKustomize
 */
export interface ApplicationSpecSourceKustomize {
  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationSpecSourceKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationSpecSourceKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationSpecSourceKustomize#images
   */
  readonly images?: string[];

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationSpecSourceKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationSpecSourceKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceKustomize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceKustomize(obj: ApplicationSpecSourceKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'images': obj.images?.map(y => y),
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationSpecSourcePlugin
 */
export interface ApplicationSpecSourcePlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationSpecSourcePlugin#env
   */
  readonly env?: ApplicationSpecSourcePluginEnv[];

  /**
   * @schema ApplicationSpecSourcePlugin#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcePlugin' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourcePlugin(obj: ApplicationSpecSourcePlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationSpecSourcePluginEnv(y)),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Automated will keep an application synced to the target revision
 *
 * @schema ApplicationSpecSyncPolicyAutomated
 */
export interface ApplicationSpecSyncPolicyAutomated {
  /**
   * AllowEmpty allows apps have zero live resources (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#allowEmpty
   */
  readonly allowEmpty?: boolean;

  /**
   * Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#prune
   */
  readonly prune?: boolean;

  /**
   * SelfHeal specifes whether to revert resources back to their desired state upon modification in the cluster (default: false)
   *
   * @schema ApplicationSpecSyncPolicyAutomated#selfHeal
   */
  readonly selfHeal?: boolean;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyAutomated' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSyncPolicyAutomated(obj: ApplicationSpecSyncPolicyAutomated | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'allowEmpty': obj.allowEmpty,
    'prune': obj.prune,
    'selfHeal': obj.selfHeal,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Retry controls failed sync retry behavior
 *
 * @schema ApplicationSpecSyncPolicyRetry
 */
export interface ApplicationSpecSyncPolicyRetry {
  /**
   * Backoff controls how to backoff on subsequent retries of failed syncs
   *
   * @schema ApplicationSpecSyncPolicyRetry#backoff
   */
  readonly backoff?: ApplicationSpecSyncPolicyRetryBackoff;

  /**
   * Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
   *
   * @schema ApplicationSpecSyncPolicyRetry#limit
   */
  readonly limit?: number;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyRetry' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSyncPolicyRetry(obj: ApplicationSpecSyncPolicyRetry | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'backoff': toJson_ApplicationSpecSyncPolicyRetryBackoff(obj.backoff),
    'limit': obj.limit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Directory holds path/directory specific options
 *
 * @schema ApplicationOperationSyncSourceDirectory
 */
export interface ApplicationOperationSyncSourceDirectory {
  /**
   * Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
   *
   * @schema ApplicationOperationSyncSourceDirectory#exclude
   */
  readonly exclude?: string;

  /**
   * Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
   *
   * @schema ApplicationOperationSyncSourceDirectory#include
   */
  readonly include?: string;

  /**
   * Jsonnet holds options specific to Jsonnet
   *
   * @schema ApplicationOperationSyncSourceDirectory#jsonnet
   */
  readonly jsonnet?: ApplicationOperationSyncSourceDirectoryJsonnet;

  /**
   * Recurse specifies whether to scan a directory recursively for manifests
   *
   * @schema ApplicationOperationSyncSourceDirectory#recurse
   */
  readonly recurse?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectory' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceDirectory(obj: ApplicationOperationSyncSourceDirectory | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'exclude': obj.exclude,
    'include': obj.include,
    'jsonnet': toJson_ApplicationOperationSyncSourceDirectoryJsonnet(obj.jsonnet),
    'recurse': obj.recurse,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Helm holds helm specific options
 *
 * @schema ApplicationOperationSyncSourceHelm
 */
export interface ApplicationOperationSyncSourceHelm {
  /**
   * FileParameters are file parameters to the helm template
   *
   * @schema ApplicationOperationSyncSourceHelm#fileParameters
   */
  readonly fileParameters?: ApplicationOperationSyncSourceHelmFileParameters[];

  /**
   * IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
   *
   * @schema ApplicationOperationSyncSourceHelm#ignoreMissingValueFiles
   */
  readonly ignoreMissingValueFiles?: boolean;

  /**
   * Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
   *
   * @schema ApplicationOperationSyncSourceHelm#parameters
   */
  readonly parameters?: ApplicationOperationSyncSourceHelmParameters[];

  /**
   * PassCredentials pass credentials to all domains (Helm's --pass-credentials)
   *
   * @schema ApplicationOperationSyncSourceHelm#passCredentials
   */
  readonly passCredentials?: boolean;

  /**
   * ReleaseName is the Helm release name to use. If omitted it will use the application name
   *
   * @schema ApplicationOperationSyncSourceHelm#releaseName
   */
  readonly releaseName?: string;

  /**
   * SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
   *
   * @schema ApplicationOperationSyncSourceHelm#skipCrds
   */
  readonly skipCrds?: boolean;

  /**
   * ValuesFiles is a list of Helm value files to use when generating a template
   *
   * @schema ApplicationOperationSyncSourceHelm#valueFiles
   */
  readonly valueFiles?: string[];

  /**
   * Values specifies Helm values to be passed to helm template, typically defined as a block
   *
   * @schema ApplicationOperationSyncSourceHelm#values
   */
  readonly values?: string;

  /**
   * Version is the Helm version to use for templating ("3")
   *
   * @schema ApplicationOperationSyncSourceHelm#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelm' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceHelm(obj: ApplicationOperationSyncSourceHelm | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'fileParameters': obj.fileParameters?.map(y => toJson_ApplicationOperationSyncSourceHelmFileParameters(y)),
    'ignoreMissingValueFiles': obj.ignoreMissingValueFiles,
    'parameters': obj.parameters?.map(y => toJson_ApplicationOperationSyncSourceHelmParameters(y)),
    'passCredentials': obj.passCredentials,
    'releaseName': obj.releaseName,
    'skipCrds': obj.skipCrds,
    'valueFiles': obj.valueFiles?.map(y => y),
    'values': obj.values,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Kustomize holds kustomize specific options
 *
 * @schema ApplicationOperationSyncSourceKustomize
 */
export interface ApplicationOperationSyncSourceKustomize {
  /**
   * CommonAnnotations is a list of additional annotations to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#commonAnnotations
   */
  readonly commonAnnotations?: { [key: string]: string };

  /**
   * CommonLabels is a list of additional labels to add to rendered manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#commonLabels
   */
  readonly commonLabels?: { [key: string]: string };

  /**
   * ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#forceCommonAnnotations
   */
  readonly forceCommonAnnotations?: boolean;

  /**
   * ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#forceCommonLabels
   */
  readonly forceCommonLabels?: boolean;

  /**
   * Images is a list of Kustomize image override specifications
   *
   * @schema ApplicationOperationSyncSourceKustomize#images
   */
  readonly images?: string[];

  /**
   * NamePrefix is a prefix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#namePrefix
   */
  readonly namePrefix?: string;

  /**
   * NameSuffix is a suffix appended to resources for Kustomize apps
   *
   * @schema ApplicationOperationSyncSourceKustomize#nameSuffix
   */
  readonly nameSuffix?: string;

  /**
   * Version controls which version of Kustomize to use for rendering manifests
   *
   * @schema ApplicationOperationSyncSourceKustomize#version
   */
  readonly version?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceKustomize' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceKustomize(obj: ApplicationOperationSyncSourceKustomize | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'commonAnnotations': ((obj.commonAnnotations) === undefined) ? undefined : (Object.entries(obj.commonAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'commonLabels': ((obj.commonLabels) === undefined) ? undefined : (Object.entries(obj.commonLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'forceCommonAnnotations': obj.forceCommonAnnotations,
    'forceCommonLabels': obj.forceCommonLabels,
    'images': obj.images?.map(y => y),
    'namePrefix': obj.namePrefix,
    'nameSuffix': obj.nameSuffix,
    'version': obj.version,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Plugin holds config management plugin specific options
 *
 * @schema ApplicationOperationSyncSourcePlugin
 */
export interface ApplicationOperationSyncSourcePlugin {
  /**
   * Env is a list of environment variable entries
   *
   * @schema ApplicationOperationSyncSourcePlugin#env
   */
  readonly env?: ApplicationOperationSyncSourcePluginEnv[];

  /**
   * @schema ApplicationOperationSyncSourcePlugin#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcePlugin' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourcePlugin(obj: ApplicationOperationSyncSourcePlugin | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'env': obj.env?.map(y => toJson_ApplicationOperationSyncSourcePluginEnv(y)),
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Apply will perform a `kubectl apply` to perform the sync.
 *
 * @schema ApplicationOperationSyncSyncStrategyApply
 */
export interface ApplicationOperationSyncSyncStrategyApply {
  /**
   * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
   *
   * @schema ApplicationOperationSyncSyncStrategyApply#force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategyApply' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSyncStrategyApply(obj: ApplicationOperationSyncSyncStrategyApply | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Hook will submit any referenced resources to perform the sync. This is the default strategy
 *
 * @schema ApplicationOperationSyncSyncStrategyHook
 */
export interface ApplicationOperationSyncSyncStrategyHook {
  /**
   * Force indicates whether or not to supply the --force flag to `kubectl apply`. The --force flag deletes and re-create the resource, when PATCH encounters conflict and has retried for 5 times.
   *
   * @schema ApplicationOperationSyncSyncStrategyHook#force
   */
  readonly force?: boolean;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSyncStrategyHook' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSyncStrategyHook(obj: ApplicationOperationSyncSyncStrategyHook | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'force': obj.force,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationSpecSourceDirectoryJsonnet
 */
export interface ApplicationSpecSourceDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationSpecSourceDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationSpecSourceDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationSpecSourceDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnet(obj: ApplicationSpecSourceDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationSpecSourceDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationSpecSourceDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourceHelmFileParameters
 */
export interface ApplicationSpecSourceHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceHelmFileParameters(obj: ApplicationSpecSourceHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationSpecSourceHelmParameters
 */
export interface ApplicationSpecSourceHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationSpecSourceHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationSpecSourceHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceHelmParameters(obj: ApplicationSpecSourceHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationSpecSourcePluginEnv
 */
export interface ApplicationSpecSourcePluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationSpecSourcePluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationSpecSourcePluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourcePluginEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourcePluginEnv(obj: ApplicationSpecSourcePluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Backoff controls how to backoff on subsequent retries of failed syncs
 *
 * @schema ApplicationSpecSyncPolicyRetryBackoff
 */
export interface ApplicationSpecSyncPolicyRetryBackoff {
  /**
   * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#duration
   */
  readonly duration?: string;

  /**
   * Factor is a factor to multiply the base duration after each failed retry
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#factor
   */
  readonly factor?: number;

  /**
   * MaxDuration is the maximum amount of time allowed for the backoff strategy
   *
   * @schema ApplicationSpecSyncPolicyRetryBackoff#maxDuration
   */
  readonly maxDuration?: string;

}

/**
 * Converts an object of type 'ApplicationSpecSyncPolicyRetryBackoff' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSyncPolicyRetryBackoff(obj: ApplicationSpecSyncPolicyRetryBackoff | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'duration': obj.duration,
    'factor': obj.factor,
    'maxDuration': obj.maxDuration,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Jsonnet holds options specific to Jsonnet
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnet
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnet {
  /**
   * ExtVars is a list of Jsonnet External Variables
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#extVars
   */
  readonly extVars?: ApplicationOperationSyncSourceDirectoryJsonnetExtVars[];

  /**
   * Additional library search dirs
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#libs
   */
  readonly libs?: string[];

  /**
   * TLAS is a list of Jsonnet Top-level Arguments
   *
   * @schema ApplicationOperationSyncSourceDirectoryJsonnet#tlas
   */
  readonly tlas?: ApplicationOperationSyncSourceDirectoryJsonnetTlas[];

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnet' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnet(obj: ApplicationOperationSyncSourceDirectoryJsonnet | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'extVars': obj.extVars?.map(y => toJson_ApplicationOperationSyncSourceDirectoryJsonnetExtVars(y)),
    'libs': obj.libs?.map(y => y),
    'tlas': obj.tlas?.map(y => toJson_ApplicationOperationSyncSourceDirectoryJsonnetTlas(y)),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmFileParameter is a file parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourceHelmFileParameters
 */
export interface ApplicationOperationSyncSourceHelmFileParameters {
  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmFileParameters#name
   */
  readonly name?: string;

  /**
   * Path is the path to the file containing the values for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmFileParameters#path
   */
  readonly path?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelmFileParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceHelmFileParameters(obj: ApplicationOperationSyncSourceHelmFileParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'path': obj.path,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * HelmParameter is a parameter that's passed to helm template during manifest generation
 *
 * @schema ApplicationOperationSyncSourceHelmParameters
 */
export interface ApplicationOperationSyncSourceHelmParameters {
  /**
   * ForceString determines whether to tell Helm to interpret booleans and numbers as strings
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#forceString
   */
  readonly forceString?: boolean;

  /**
   * Name is the name of the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#name
   */
  readonly name?: string;

  /**
   * Value is the value for the Helm parameter
   *
   * @schema ApplicationOperationSyncSourceHelmParameters#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceHelmParameters' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceHelmParameters(obj: ApplicationOperationSyncSourceHelmParameters | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'forceString': obj.forceString,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * EnvEntry represents an entry in the application's environment
 *
 * @schema ApplicationOperationSyncSourcePluginEnv
 */
export interface ApplicationOperationSyncSourcePluginEnv {
  /**
   * Name is the name of the variable, usually expressed in uppercase
   *
   * @schema ApplicationOperationSyncSourcePluginEnv#name
   */
  readonly name: string;

  /**
   * Value is the value of the variable
   *
   * @schema ApplicationOperationSyncSourcePluginEnv#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourcePluginEnv' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourcePluginEnv(obj: ApplicationOperationSyncSourcePluginEnv | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourceDirectoryJsonnetExtVars
 */
export interface ApplicationSpecSourceDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnetExtVars(obj: ApplicationSpecSourceDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationSpecSourceDirectoryJsonnetTlas
 */
export interface ApplicationSpecSourceDirectoryJsonnetTlas {
  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationSpecSourceDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationSpecSourceDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationSpecSourceDirectoryJsonnetTlas(obj: ApplicationSpecSourceDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnetExtVars {
  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetExtVars#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnetExtVars' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnetExtVars(obj: ApplicationOperationSyncSourceDirectoryJsonnetExtVars | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * JsonnetVar represents a variable to be passed to jsonnet during manifest generation
 *
 * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas
 */
export interface ApplicationOperationSyncSourceDirectoryJsonnetTlas {
  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#code
   */
  readonly code?: boolean;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#name
   */
  readonly name: string;

  /**
   * @schema ApplicationOperationSyncSourceDirectoryJsonnetTlas#value
   */
  readonly value: string;

}

/**
 * Converts an object of type 'ApplicationOperationSyncSourceDirectoryJsonnetTlas' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ApplicationOperationSyncSourceDirectoryJsonnetTlas(obj: ApplicationOperationSyncSourceDirectoryJsonnetTlas | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'code': obj.code,
    'name': obj.name,
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

